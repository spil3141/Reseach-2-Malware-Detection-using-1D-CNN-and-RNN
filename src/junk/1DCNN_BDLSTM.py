"""#### Importting library ###"""

import numpy
import matplotlib.pyplot as plt
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Dropout, Activation, Reshape, LSTM, Bidirectional
from tensorflow.keras.layers import Embedding, Reshape, TimeDistributed
from tensorflow.keras.layers import Flatten,Conv1D, GlobalMaxPooling1D,MaxPooling1D,GlobalAveragePooling1D
import tensorflow as tf
from tensorflow.keras import layers
from sklearn.metrics import confusion_matrix
import tensorflow
import pandas as pd
from datetime import datetime
from sklearn.preprocessing import StandardScaler
import h5py
import numpy
import os
from sklearn.metrics import f1_score
from sklearn.metrics import precision_recall_fscore_support
import time
from sklearn.metrics import accuracy_score

"""################ loading from file #################"""
# Loading Dataset from Hdf5 file format

filename = "/mnt/d/Dataset 2.0 (completed)/(Dataset 3.1)(8000 samples).hdf5"

def train_batch_generator():
    with h5py.File(filename, "r") as f:
        for X,Y in zip(f["/Dataset 3.1/Train/Feature"],f["/Dataset 3.1/Train/Label"]):
            #make sure sample and target type is a numpy array
            Y = tf.one_hot(Y, depth=2)
            yield (X,Y)
def valid_batch_generator():
    with h5py.File(filename, "r") as f:
        for X,Y in zip(f["/Dataset 3.1/Valid/Feature"],f["/Dataset 3.1/Valid/Label"]):
            #make sure sample and target type is a numpy array
            Y = tf.one_hot(Y, depth=2)
            yield (X,Y)

X_Train_data = tf.data.Dataset.from_generator(train_batch_generator,
                                          output_types=('float32', 'int32'),
                                          output_shapes=(tf.TensorShape((None,)), tf.TensorShape((None,)))
                                         )
X_Valid_data = tf.data.Dataset.from_generator(valid_batch_generator,
                                          output_types=('float32', 'int32'),
                                          output_shapes=(tf.TensorShape((None,)), tf.TensorShape((None,)))
                                         )



"""################ Data Preprocessing ###"""

def benchmark(dataset, num_epochs=2):
    start_time = time.perf_counter()
    for epoch_num in range(num_epochs):
        for sample in dataset:
            # Performing a training step
            time.sleep(0.01)
    print("Execution time:", time.perf_counter() - start_time)



## Visualizing dataset batches 
def plot_batch_sizes(ds,name):
  batch_sizes = [(numpy.asarray(batch)).shape[0] for batch in ds]
  plt.bar(range(len(batch_sizes)), batch_sizes)
  plt.xlabel('Batch number')
  plt.ylabel('Batch size')
  plt.title(name)
  
#plot_batch_sizes(X_Test_data,"Test Dataset")  

# Pre-processing 
def norm(x,_min,_max):
   return (x - _min)/(_max - _min)

def normalize_samples(feature,label):
   X = norm(feature,0,255)
   Y = label
   return X,Y
##Using the dataset batch function, shuffle and divide the dataset into batches
X_Train_data_norm = X_Train_data.map(normalize_samples)
X_Valid_data_norm = X_Valid_data.map(normalize_samples)

# Batch split 
X_Train_data_norm = X_Train_data_norm.batch(125)
X_Valid_data_norm = X_Valid_data_norm.batch(125)

#benchmark(X_Test_data_norm)
#benchmark((X_Test_data_norm).prefetch(tf.data.experimental.AUTOTUNE))

#benchmark(tf.data.Dataset.range(2).interleave(X_Test_data,num_parallel_calls=tf.data.experimental.AUTOTUNE))

print("Done")   
"""############################  model #####################################"""


EPOCHS = 10
Batch_size = None
#size = next(valid_batch_generator())
#maxlen_pad = size[0].shape[0]
with h5py.File(filename, "r") as f:
   maxlen_pad = f["Dataset 3.1/Valid/Feature"][0].shape[0]


"""#### Distributed Learning ########"""



strategy = tf.distribute.MirroredStrategy()
print('Number of devices: {}'.format(strategy.num_replicas_in_sync))
with strategy.scope():
    n_timesteps, n_features= int(maxlen_pad / 4), 4
    
    #Input
    inputs = tf.keras.layers.Input(shape=(maxlen_pad,))
    #Reshape the input dataset to fits the 1D CNN input requirements.
    x = tf.keras.layers.Reshape((n_timesteps, n_features))(inputs)
    #1D CNN for 1D feature extractions
    x = tf.keras.layers.Conv1D(64,64,strides=16, activation='relu')(x)
    x = tf.keras.layers.MaxPooling1D(pool_size = 2)(x)
    x = tf.keras.layers.Dropout(0.3)(x,training=True)
    #Bi-D LSTM layer for sequential data learning 
    x = tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(16))(x)
    #Last Dense layer for Reducing the dimensional for getting the needed classes. 
    x = tf.keras.layers.Dense(100, activation='relu')(x)
    x = tf.keras.layers.Dropout(rate=0.5)(x, training=True)  
    outputs = tf.keras.layers.Dense(2, activation='softmax')(x)
    model = tf.keras.Model(inputs=inputs,outputs=outputs)
    
"""
#Reshape the input dataset to fits the 1D CNN input requirements.
    x = tf.keras.layers.Reshape((n_timesteps, n_features))(inputs)
    #x = tf.keras.layers.BatchNormalization()(x)
    #1D CNN for 1D feature extractions
    x = tf.keras.layers.Conv1D(64,64,strides=16, activation='relu')(x)
    x = tf.keras.layers.MaxPooling1D(pool_size = 2)(x)
    x = tf.keras.layers.Dropout(0.3)(x,training=True)
    x = tf.keras.layers.Conv1D(128,5,strides=1, activation='relu')(x)
    x = tf.keras.layers.MaxPooling1D(pool_size = 2)(x)
    x = tf.keras.layers.Dropout(0.3)(x,training=True)
    x = tf.keras.layers.Conv1D(256,5,strides=1, activation='relu')(x)
    x = tf.keras.layers.MaxPooling1D(pool_size = 2)(x)
    x = tf.keras.layers.Dropout(0.25)(x,training=True)
    #Bi-D LSTM layer for sequential data learning 
    x = tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(256,return_sequences=True))(x)
    x = tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(128, return_sequences=True))(x)
    x = tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(64))(x)
    #Last Dense layer for Reducing the dimensional for getting the needed classes. 
    x = tf.keras.layers.Dense(64, activation='relu')(x)
    x = tf.keras.layers.Dropout(rate=0.5)(x, training=True)  

"""

model.summary()
print("Input Shapes: ")
for i in model.layers:
    print(i.name,"\t" ,i.input_shape)

# Define the checkpoint directory to store the checkpoints

checkpoint_dir = 'training_checkpoints'
# Name of the checkpoint files
checkpoint_prefix = os.path.join(checkpoint_dir, "ckpt_{epoch}")

# Function for decaying the learning rate.
# You can define any decay function you need.
def decay(epoch):
  if epoch < 3:
    return 1e-3
  elif epoch >= 3 and epoch < 7:
    return 1e-4
  else:
    return 1e-5

# Callback for printing the LR at the end of each epoch.
class PrintLR(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs=None):
    print('\nLearning rate for epoch {} is {}'.format(epoch + 1,
                                                      model.optimizer.lr.numpy()))

callbacks = [
    tf.keras.callbacks.TensorBoard(log_dir='logs'),
    tf.keras.callbacks.ModelCheckpoint(filepath=checkpoint_prefix,
                                       save_weights_only=True),
    tf.keras.callbacks.LearningRateScheduler(decay),
    PrintLR()
]

    

#model = test()
# model = create_model3()

""" Compiling mode"""
#opt = tensorflow.keras.optimizers.Adam(learning_rate=0.001)
#model.compile(loss='binary_crossentropy', 
#               optimizer=opt, metrics=['accuracy']) 

#model.compile(optimizer='adam', loss='mae')

#model.compile(optimizer='adam',
#                  loss='categorical_crossentropy',
#                  metrics=['accuracy'])
# model.compile(optimizer= tf.keras.optimizers.SGD(learning_rate=0.01, #default = 0.01
#                                                  momentum=0.9,
#                                                  decay=1e-2,
#                                                  nesterov=False),
#                       loss="categorical_crossentropy",
#                       metrics = ["accuracy"])   

#model.compile(loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),
#            optimizer=tf.keras.optimizers.Adam(),
#            metrics=['accuracy'])
#model.load_weights(tf.train.latest_checkpoint(checkpoint_dir))

opt = tf.keras.optimizers.Adam(learning_rate=0.001)
model.compile(loss='categorical_crossentropy', 
                optimizer=opt, metrics=['accuracy']) 


## Fitting Function 

# Fit with tf.data """
history = model.fit(X_Train_data_norm,
                    epochs=EPOCHS,
                    callbacks= callbacks,
                    verbose=1,
                    validation_data = X_Valid_data_norm
                   )
"""### Saving history ###"""
hist_df = pd.DataFrame(history.history)
# or save to csv:
hist_csv_file = 'history.csv'
with open(hist_csv_file, mode='w') as f:
    hist_df.to_csv(f)

# Fit with generator """
#history = model.fit(train_batch_generator,
#                    epochs=EPOCHS,
#                    verbose=1,
#                    validation_data = valid_batch_generator
#                   )

# Fit Normal
#callback = tf.keras.callbacks.EarlyStopping(monitor="accuracy",patience=3)
#history = model.fit(X_train, y_train_onehot, 
#                    batch_size= Batch_size, epochs=EPOCHS,
#                    validation_data = (X_valid,y_valid_onehot),
#                    callbacks=[callback],
#                    )

# load history
# history = pd.read_csv("history.csv")
#load model weights
# model.load_weights(tf.train.latest_checkpoint(checkpoint_dir))
#$ tensorboard --logdir=path/to/log-directory



