import tensorflow as tf 

class OneDCNNBiDLSTM(tf.keras.Model):
    s_NUM_OF_FEATURES = 4
    
    def __init__(self, **kwargs):
        super(OneDCNNBiDLSTM, self).__init__(**kwargs)

        print("OneDCNNBiDLSTM Model was Instantiated.")

    def build(self, input_shape):
        time_step = int(input_shape[-1] / OneDCNNBiDLSTM.s_NUM_OF_FEATURES)

        self.reshape_layer = tf.keras.layers.Reshape((time_step, OneDCNNBiDLSTM.s_NUM_OF_FEATURES), input_shape= input_shape)
        
        self.conv1d_layer_1 = tf.keras.layers.Conv1D(64, 64, strides=16, kernel_regularizer= tf.keras.regularizers.l2(0.001), activation="relu")
        self.conv1d_layer_2 = tf.keras.layers.Conv1D(64, 64, strides=16, kernel_regularizer= tf.keras.regularizers.l2(0.001), activation="relu")
        self.maxpooling_layer_1 = tf.keras.layers.MaxPooling1D(pool_size=2)
        self.dropout_layer_1 = tf.keras.layers.Dropout(0.5)

        self.conv1d_layer_3 = tf.keras.layers.Conv1D(124, 124, strides=1, kernel_regularizer= tf.keras.regularizers.l2(0.001), activation="relu")
        self.maxpooling_layer_2 = tf.keras.layers.MaxPooling1D(pool_size=2)
        self.dropout_layer_2 = tf.keras.layers.Dropout(0.5)

        self.bidlstm_layer = tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(20))
        self.dropout_layer_3 = tf.keras.layers.Dropout(0.5)

        self.dense_layer_1 = tf.keras.layers.Dense(100, kernel_regularizer= tf.keras.regularizers.l2(0.001), activation="relu")
        self.dropout_layer_4 = tf.keras.layers.Dropout(0.5)
        self.dense_layer_2 = tf.keras.layers.Dense(100, kernel_regularizer= tf.keras.regularizers.l2(0.001), activation="relu")
        self.dropout_layer_5 = tf.keras.layers.Dropout(0.5)

        self.logits_layers = tf.keras.layers.Dense(1, activation="sigmoid")


    def call(self, input, training = None):
        reshape = self.reshape_layer(input)

        con1d_1 = self.conv1d_layer_1(reshape)
        con1d_2 = self.conv1d_layer_2(con1d_1)
        maxpooling_1 = self.maxpooling_layer_1(con1d_2)
        dropout_1_opt = maxpooling_1
        if(training):
            dropout_1_opt = self.dropout_layer_1(dropout_1_opt)

        con1d_3 = self.conv1d_layer_3(dropout_1_opt)
        maxpooling_2 = self.maxpooling_layer_2(con1d_3)
        dropout_2_opt = maxpooling_2
        if(training):
            dropout_2_opt = self.dropout_layer_2(dropout_2_opt)

        bidlstm = self.bidlstm_layer(dropout_2_opt)
        dropout_3_opt = bidlstm
        if(training):
            dropout_3_opt = self.dropout_layer_3(dropout_3_opt)

        dense_1 = self.dense_layer_1(dropout_3_opt)
        dropout_4_opt = dense_1
        if(training):
            dropout_4_opt = self.dropout_layer_4(dropout_4_opt)

        dense_2 = self.dense_layer_2(dropout_4_opt)
        dropout_5_opt = dense_2
        if(training):
            dropout_5_opt = self.dropout_layer_5(dropout_5_opt)

        logits = self.logits_layers(dropout_5_opt)
        return logits

