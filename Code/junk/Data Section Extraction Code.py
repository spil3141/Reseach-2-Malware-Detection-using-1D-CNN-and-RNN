from androguard.core.bytecodes.apk import APK
from androguard.core.bytecodes.dvm import DalvikVMFormat
import os
import sys
import math
import numpy
from PIL import Image
from androguard.misc import AnalyzeAPK

from keras.preprocessing import sequence
from keras.models import Sequential
from keras.layers import Dense, Dropout, Activation, Reshape
from keras.layers import Embedding
from keras.layers import Conv1D, GlobalMaxPooling1D
from keras.datasets import imdb
from sklearn.model_selection import train_test_split


#import timeit
#import multiprocessing
#import PIL
"""############################# Paths to Important Directories ###########################################"""

path_to_mal_apks_dir = "G:/Complete_Dataset/Raw Apk Files/Sorted/FInal Full Evaluation/Malware Apks"
#path_to_mal_img_dir = "G:/Complete_Dataset/Raw Apk Files/Sorted/Malware Imgs"

path_to_benign_apks_dir = "G:/Complete_Dataset/Raw Apk Files/Sorted/FInal Full Evaluation/Benign Apks"
#path_to_benign_img_dir = "G:/Complete_Dataset/Raw Apk Files/Sorted/Benign Imgs"

path_to_mal_img_dir = "G:/Complete_Dataset/Raw Apk Files/Sorted/FInal Full Evaluation/Dex/Malware Imgs"
path_to_benign_img_dir = "G:/Complete_Dataset/Raw Apk Files/Sorted/FInal Full Evaluation/Dex/Benign Imgs"


"""############################# Conversion Functions ###########################################"""
def From_apk_to_Data_Section(path_of_apk):
    apk = path_of_apk
    apk_obj = APK(apk)
    dalvik_obj = DalvikVMFormat(apk_obj)
    return dalvik_obj.get_buff()[dalvik_obj.header.data_off:] # using the offset from the start of file to start of the data section we get can get the data section


"""################ storing data in variables #################"""
mal_data_sections = []
benign_data_sections = []

#Malware APKs
for path in os.listdir(path_to_mal_apks_dir)[:50]:
    mal_data_sections.append(From_apk_to_Data_Section(os.path.join(path_to_mal_apks_dir,path)))


#Benign APKs
for path in os.listdir(path_to_benign_apks_dir)[:50]:
    benign_data_sections.append(From_apk_to_Data_Section(os.path.join(path_to_benign_apks_dir,path)))

mal_data_sections = numpy.asarray(mal_data_sections)
benign_data_sections =  numpy.asarray(benign_data_sections)


X_combined = numpy.concatenate((mal_data_sections, benign_data_sections))
Y_combined = [] 
for i in range(len(X_combined)):
    if( i < len(X_combined)/2):
        Y_combined.append(1)
    else:
        Y_combined.append(0)

X_train, X_test, y_train, y_test = train_test_split(X_combined, Y_combined, test_size=0.33, random_state=42,shuffle = True)

y_train = numpy.asarray(y_train)
y_test = numpy.asarray(y_test)

del(X_combined)
del(Y_combined)
del(mal_data_sections)
del(benign_data_sections)

#Padding 

maxlen_pad = 30000
print('Pad sequences (samples x time)')
x_train_pad = sequence.pad_sequences(X_train, maxlen= maxlen_pad)
x_test_pad = sequence.pad_sequences(X_test, maxlen=maxlen_pad)
print('x_train shape:', x_train_pad.shape)
print('x_test shape:', x_test_pad.shape)



