# -*- coding: utf-8 -*-
import numpy
import matplotlib.pyplot as plt
import tensorflow
import h5py


"""################ loading from hdf5 files #################"""

# Loading Dataset from Hdf5 file format

filename = "D:/Dataset 1.0/File1(4000 samples-post-padded).hdf5"

def train_batch_generator():
    with h5py.File(filename, "r") as f:
        for X,Y in zip(f["/Dataset 1.1/Train/Feature"],f["/Dataset 1.1/Train/Label"]):
            #make sure sample and target type is a numpy array
            Y = tensorflow.one_hot(Y, depth=2)
            yield (X,Y)
def valid_batch_generator():
    with h5py.File(filename, "r") as f:
        for X,Y in zip(f["/Dataset 1.1/Valid/Feature"],f["/Dataset 1.1/Valid/Label"]):
            #make sure sample and target type is a numpy array
            Y = tensorflow.one_hot(Y, depth=2)
            yield (X,Y)
def test_batch_generator():
    with h5py.File(filename, "r") as f:
        for X,Y in zip(f["/Dataset 1.1/Test/Feature"],f["/Dataset 1.1/Test/Label"]):
            #make sure sample and target type is a numpy array
            Y = tensorflow.one_hot(Y, depth=2)
            yield (X,Y)

X_Train_data = tensorflow.data.Dataset.from_generator(train_batch_generator,
                                          output_types=('float32', 'int32'),
                                          output_shapes=(tensorflow.TensorShape((None,)), tensorflow.TensorShape((None,)))
                                         )
X_Valid_data = tensorflow.data.Dataset.from_generator(valid_batch_generator,
                                          output_types=('float32', 'int32'),
                                          output_shapes=(tensorflow.TensorShape((None,)), tensorflow.TensorShape((None,)))
                                         )
X_Test_data = tensorflow.data.Dataset.from_generator(test_batch_generator,
                                          output_types=('float32', 'int32'),
                                          output_shapes=(tensorflow.TensorShape((None,)), tensorflow.TensorShape((None,)))
                                         )


"""################ CNN Model (inceptionv3) #################"""
with h5py.File(filename, "r") as f:
   maxlen_pad = f["Dataset 1.1/Valid/Feature"][0].shape[0]
n_timesteps, n_features, n_input = int(maxlen_pad / 4), 4, maxlen_pad


def create_inception_v3():
        #input_tensor = tensorflow.keras.layers.Input(shape=(150,150, 1))  # this assumes K.image_data_format() == 'channels_last'
        reshape_layer = tensorflow.keras.layers.Reshape((n_timesteps, n_features), input_shape=(n_input,))
        base_model = tensorflow.keras.applications.inception_v3.InceptionV3(input_tensor = reshape_layer,weights="imagenet", include_top=False)
        x = base_model.output
        x = tensorflow.keras.layers.GlobalAveragePooling2D()(x)
        model = tensorflow.keras.models.Model(inputs=reshape_layer.input, outputs=x)
        return model

model = create_inception_v3()
model.summary()